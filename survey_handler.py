import logging
from typing import Dict, Any, List, Tuple, Optional, Union
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from button_states import SurveyStates, ProfileStates
from profile_generator import generate_profile, save_profile_to_db

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ railway_print –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from railway_logging import railway_print
except ImportError:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é railway_print, –µ—Å–ª–∏ –º–æ–¥—É–ª—å railway_logging –Ω–µ –Ω–∞–π–¥–µ–Ω
    def railway_print(message, level="INFO"):
        prefix = "–ò–ù–§–û"
        if level.upper() == "ERROR":
            prefix = "–û–®–ò–ë–ö–ê"
        elif level.upper() == "WARNING":
            prefix = "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï"
        elif level.upper() == "DEBUG":
            prefix = "–û–¢–õ–ê–î–ö–ê"
        print(f"{prefix}: {message}")
        import sys
        sys.stdout.flush()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–ø—Ä–æ—Å–∞
survey_router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard() -> ReplyKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    """
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üìù –û–ø—Ä–æ—Å")],
            [KeyboardButton(text="üßò –ú–µ–¥–∏—Ç–∞—Ü–∏–∏"), KeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
            [KeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã"), KeyboardButton(text="üí¨ –ü–æ–º–æ—â—å")],
            [KeyboardButton(text="üîÑ –†–µ—Å—Ç–∞—Ä—Ç")]
        ],
        resize_keyboard=True
    )

async def start_survey(message: Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    has_profile = user_data.get("profile_completed", False)
    
    if has_profile:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="confirm_survey")
        builder.button(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_survey")
        builder.adjust(2)  # –†–∞–∑–º–µ—â–∞–µ–º –æ–±–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
        
        await message.answer(
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>\n\n"
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å. –ï—Å–ª–∏ –≤—ã –ø—Ä–æ–π–¥–µ—Ç–µ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ, "
            "–≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã.\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ?",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        return
    
    # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å —Å—Ä–∞–∑—É
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–º–æ-–≤–æ–ø—Ä–æ—Å–æ–≤
    from questions import get_demo_questions
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ–º–æ-–≤–æ–ø—Ä–æ—Å–æ–≤
    demo_questions = get_demo_questions()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await message.answer(
        "üìã <b>–ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å!</b>\n\n"
        "–Ø –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å —Ç–µ–±—è. "
        "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –∞ –∑–∞—Ç–µ–º –º—ã –ø–µ—Ä–µ–π–¥–µ–º –∫ "
        "—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º—É —Ç–µ—Å—Ç—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–≤–æ–∏—Ö —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω.",
        parse_mode="HTML"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await message.answer(
        f"–í–æ–ø—Ä–æ—Å 1: {demo_questions[0]['text']}",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å")]],
            resize_keyboard=True,
            one_time_keyboard=False,
            input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."
        )
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø—Ä–æ—Å
    await state.set_state(SurveyStates.answering_questions)
    await state.update_data(
        question_index=0,
        question_type="demo",
        answers={},
        is_demo_questions=True
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –æ–ø—Ä–æ—Å")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ–ø—Ä–æ—Å–∞
@survey_router.callback_query(F.data == "confirm_survey")
async def confirm_restart_survey(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞.
    
    Args:
        callback: Callback query
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.delete()
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    await state.update_data(
        answers={},
        profile_completed=False,
        profile_text="",
        personality_type=None
    )
    
    # –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ
    await start_survey(callback.message, state)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer("–ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ–ø—Ä–æ—Å–∞
@survey_router.callback_query(F.data == "cancel_survey")
async def cancel_restart_survey(callback: CallbackQuery):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞.
    
    Args:
        callback: Callback query
    """
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.delete()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
    await callback.message.answer(
        "‚úÖ –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. –í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
        reply_markup=get_main_keyboard()
    )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer("–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–ø—Ä–æ—Å–∞
@survey_router.message(SurveyStates.answering_questions)
async def process_survey_answer(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–ø—Ä–æ—Å–∞.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å":
        await state.clear()
        await message.answer(
            "‚ùå –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
    data = await state.get_data()
    question_index = data.get("question_index", 0)
    answers = data.get("answers", {})
    is_demo_questions = data.get("is_demo_questions", True)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
    from questions import get_demo_questions, get_all_vasini_questions
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    demo_questions = get_demo_questions()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_all_vasini_questions –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
    try:
        vasini_questions = get_all_vasini_questions()
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(vasini_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ Vasini")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤ Vasini: {e}")
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        vasini_questions = []
        railway_print("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã Vasini, –æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "ERROR")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    if is_demo_questions:
        current_question = demo_questions[question_index]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –¥–µ–º–æ-–≤–æ–ø—Ä–æ—Å
        question_id = current_question["id"]
        answers[question_id] = message.text
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        question_index += 1
        
        # –ï—Å–ª–∏ –¥–µ–º–æ-–≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å–∞–º Vasini
        if question_index >= len(demo_questions):
            is_demo_questions = False
            question_index = 0
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∞ Vasini
            await message.answer(
                "üß† <b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞!</b>\n\n"
                "–¢–µ–ø–µ—Ä—å —è –∑–∞–¥–∞–º –≤–∞–º 34 –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—à–∏—Ö —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –∏ —Ç–∞–ª–∞–Ω—Ç–æ–≤. "
                "–≠—Ç–æ—Ç —Ç–µ—Å—Ç –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è Vasini Strengths Constellation –∏ –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.\n\n"
                "–ù–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ (A, B, C –∏–ª–∏ D).\n\n"
                "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
                parse_mode="HTML",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚úÖ –î–∞, –≥–æ—Ç–æ–≤(–∞)")],
                        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å")]
                    ],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(
                question_index=question_index,
                answers=answers,
                is_demo_questions=is_demo_questions,
                waiting_for_vasini_confirmation=True
            )
            return
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ Vasini
        if data.get("waiting_for_vasini_confirmation", False):
            if message.text == "‚úÖ –î–∞, –≥–æ—Ç–æ–≤(–∞)":
                # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç Vasini
                current_question = vasini_questions[question_index]
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
                options = current_question["options"]
                keyboard = []
                for option, text in options.items():
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –±–æ–ª–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–π –±—É–∫–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç–∞
                    button_text = f"{option}: {text}"
                    keyboard.append([KeyboardButton(text=button_text)])
                keyboard.append([KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å")])
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
                logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å 1 —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤: {', '.join(options.keys())}")
                
                await message.answer(
                    f"–í–æ–ø—Ä–æ—Å {question_index + 1}/34: {current_question['text']}",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=keyboard,
                        resize_keyboard=True,
                        one_time_keyboard=True,
                        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ (A, B, C –∏–ª–∏ D)..."
                    )
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.update_data(
                    waiting_for_vasini_confirmation=False
                )
                return
            elif message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å":
                await state.clear()
                await message.answer(
                    "‚ùå –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
                    reply_markup=get_main_keyboard()
                )
                return
            else:
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É, –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
                options = current_question["options"]
                keyboard = []
                for opt, text in options.items():
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –±–æ–ª–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–π –±—É–∫–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç–∞
                    button_text = f"{opt}: {text}"
                    keyboard.append([KeyboardButton(text=button_text)])
                keyboard.append([KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å")])
                
                # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—ã–±–æ—Ä
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—ã–±–æ—Ä –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question_index + 1}")
                
                await message.answer(
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ (A, B, C –∏–ª–∏ D).\n\n"
                    f"–í–æ–ø—Ä–æ—Å {question_index + 1}/34: {current_question['text']}",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=keyboard,
                        resize_keyboard=True,
                        one_time_keyboard=True,
                        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ (A, B, C –∏–ª–∏ D)..."
                    )
                )
                return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å Vasini
        current_question = vasini_questions[question_index]
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_index + 1}: '{message.text}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—É –≤–∞—Ä–∏–∞–Ω—Ç–∞ (A, B, C –∏–ª–∏ D)
        option = None
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        for opt in ["A", "B", "C", "D"]:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç "A: —Ç–µ–∫—Å—Ç"
            if message.text.startswith(f"{opt}:"):
                option = opt
                logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω –æ—Ç–≤–µ—Ç '{opt}' –ø–æ —à–∞–±–ª–æ–Ω—É '{opt}:'")
                break
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç "A —Ç–µ–∫—Å—Ç" –±–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏—è
            elif message.text.startswith(f"{opt} "):
                option = opt
                logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω –æ—Ç–≤–µ—Ç '{opt}' –ø–æ —à–∞–±–ª–æ–Ω—É '{opt} '")
                break
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–æ–ª—å–∫–æ –±—É–∫–≤—É "A", "B", "C" –∏–ª–∏ "D"
            elif message.text.upper() == opt:
                option = opt
                logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω –æ—Ç–≤–µ—Ç '{opt}' (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–æ–ª—å–∫–æ –±—É–∫–≤—É)")
                break
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—É –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ (–º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            elif f" {opt} " in f" {message.text.upper()} ":
                option = opt
                logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω –æ—Ç–≤–µ—Ç '{opt}' –≤ —Ç–µ–∫—Å—Ç–µ '{message.text}'")
                break
        
        if not option:
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ: '{message.text}'")
            
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É, –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
            options = current_question["options"]
            keyboard = []
            for opt, text in options.items():
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –±–æ–ª–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–π –±—É–∫–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç–∞
                button_text = f"{opt}: {text}"
                keyboard.append([KeyboardButton(text=button_text)])
            keyboard.append([KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å")])
            
            # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—ã–±–æ—Ä
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—ã–±–æ—Ä –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question_index + 1}")
            
            await message.answer(
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ (A, B, C –∏–ª–∏ D).\n\n"
                f"–í–æ–ø—Ä–æ—Å {question_index + 1}/34: {current_question['text']}",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=keyboard,
                    resize_keyboard=True,
                    one_time_keyboard=True,
                    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ (A, B, C –∏–ª–∏ D)..."
                )
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å Vasini
        question_id = current_question["id"]
        answers[question_id] = option
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            interpretation = current_question["interpretations"][option]
            await message.answer(
                f"üí° <b>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</b>\n\n{interpretation}",
                parse_mode="HTML"
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è
            await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {e}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        question_index += 1
        
        # –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã Vasini –∑–∞–¥–∞–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
        if question_index >= len(vasini_questions):
            await complete_survey(message, state, answers)
            return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    if is_demo_questions:
        next_question = demo_questions[question_index]
        await message.answer(
            f"–í–æ–ø—Ä–æ—Å {question_index + 1}/{len(demo_questions)}: {next_question['text']}",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å")]],
                resize_keyboard=True,
                one_time_keyboard=False,
                input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."
            )
        )
    else:
        next_question = vasini_questions[question_index]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        options = next_question["options"]
        keyboard = []
        for option, text in options.items():
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –¥–µ–ª–∞—è –±—É–∫–≤—É –≤–∞—Ä–∏–∞–Ω—Ç–∞ –±–æ–ª–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–π
            button_text = f"{option}: {text}"
            keyboard.append([KeyboardButton(text=button_text)])
        keyboard.append([KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å")])
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å {question_index + 1} —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤: {', '.join(options.keys())}")
        
        await message.answer(
            f"–í–æ–ø—Ä–æ—Å {question_index + 1}/34: {next_question['text']}",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=keyboard,
                resize_keyboard=True,
                one_time_keyboard=True,
                input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ (A, B, C –∏–ª–∏ D)..."
            )
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        question_index=question_index,
        answers=answers,
        is_demo_questions=is_demo_questions
    )

async def complete_survey(message: Message, state: FSMContext, answers: Dict[str, str]):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø—Ä–æ—Å –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        answers: –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –∏–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    processing_message = await message.answer(
        "‚úÖ <b>–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
        "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤. "
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...",
        parse_mode="HTML"
    )
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏
    from questions import get_personality_type_from_answers
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏
    type_counts, primary_type, secondary_type = get_personality_type_from_answers(answers)
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile_data = await generate_profile(answers)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫—É—é –≤–µ—Ä—Å–∏—é
        detailed_profile = profile_data.get("details", "")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª–∏–Ω–æ–π {len(detailed_profile)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
        await state.set_state(None)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(
            answers=answers,
            profile_completed=True,
            profile_details=detailed_profile,
            profile_text=detailed_profile,
            personality_type=primary_type,
            secondary_type=secondary_type,
            type_counts=type_counts
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        verification_data = await state.get_data()
        saved_details = verification_data.get("profile_details", "")
        saved_text = verification_data.get("profile_text", "")
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(saved_details)} —Å–∏–º–≤–æ–ª–æ–≤ –≤ profile_details, {len(saved_text)} —Å–∏–º–≤–æ–ª–æ–≤ –≤ profile_text")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
        await processing_message.delete()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        builder.button(text="üí° –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç", callback_data="get_advice")
        builder.adjust(1)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        max_message_length = 4000  # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–Ω–æ –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
        
        if len(detailed_profile) > max_message_length:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            current_part = ""
            for line in detailed_profile.split('\n'):
                if len(current_part) + len(line) + 1 <= max_message_length:
                    current_part += line + '\n'
                else:
                    parts.append(current_part)
                    current_part = line + '\n'
            if current_part:
                parts.append(current_part)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è
            for i, part in enumerate(parts):
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
                if i == len(parts) - 1:
                    await message.answer(
                        part,
                        parse_mode="HTML",
                        reply_markup=builder.as_markup()
                    )
                else:
                    await message.answer(
                        part,
                        parse_mode="HTML"
                    )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            await message.answer(
                detailed_profile,
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer(
            "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_keyboard()
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–≤–µ—Ä—à–∏–ª –æ–ø—Ä–æ—Å, –ø—Ä–æ—Ñ–∏–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await processing_message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer(
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_keyboard()
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
        await state.clear()
        return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ–ø—Ä–æ—Å–∞
@survey_router.callback_query(F.data == "restart_survey")
async def restart_survey(callback: CallbackQuery, state: FSMContext):
    """
    –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–æ—Å, —É–¥–∞–ª—è—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        callback: Callback query
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º –¥–∞–Ω–Ω—ã—Ö
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="confirm_profile_reset")
    builder.button(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_profile_reset")
    builder.adjust(1)
    
    await callback.message.answer(
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
        "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ. "
        "–í—Å–µ –≤–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–±—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è")

@survey_router.callback_query(F.data == "confirm_profile_reset")
async def confirm_profile_reset(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–±—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–æ—Å.
    
    Args:
        callback: Callback query
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    await state.update_data(
        answers={},
        profile_completed=False,
        profile_text="",
        profile_details="",
        personality_type=None,
        waiting_for_vasini_confirmation=False,
        question_index=0,
        is_demo_questions=True
    )
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await callback.message.delete()
    
    # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–±—Ä–æ—Å–µ
    await callback.message.answer(
        "‚úÖ <b>–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!</b>\n\n"
        "–°–µ–π—á–∞—Å –º—ã –Ω–∞—á–Ω–µ–º –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.",
        parse_mode="HTML"
    )
    
    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞
    import asyncio
    await asyncio.sleep(1)
    
    # –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ
    await start_survey(callback.message, state)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å —Å–±—Ä–æ—à–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —Å–±—Ä–æ—Å–∏–ª –ø—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞—á–∞–ª –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ")

@survey_router.callback_query(F.data == "cancel_profile_reset")
async def cancel_profile_reset(callback: CallbackQuery):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç —Å–±—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è.
    
    Args:
        callback: Callback query
    """
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await callback.message.delete()
    
    # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—Ç–º–µ–Ω–µ
    await callback.message.answer(
        "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
        reply_markup=get_main_keyboard()
    )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer("–û—Ç–º–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Å–±—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è")

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
@survey_router.callback_query(F.data == "show_details")
async def show_profile_details(callback: CallbackQuery, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å.
    
    Args:
        callback: Callback query
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await callback.message.bot.send_chat_action(chat_id=callback.message.chat.id, action="typing")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    details_text = user_data.get("profile_details", "")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å. –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(details_text) if details_text else 0}")
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤ user_data: {', '.join(user_data.keys())}")
    
    if not details_text or len(details_text) < 20:
        await callback.message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.",
            parse_mode="HTML"
        )
        await callback.answer("–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    max_message_length = 4000  # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–Ω–æ –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
    
    if len(details_text) > max_message_length:
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ —á–∞—Å—Ç–∏
        parts = []
        current_part = ""
        for line in details_text.split('\n'):
            if len(current_part) + len(line) + 1 <= max_message_length:
                current_part += line + '\n'
            else:
                parts.append(current_part)
                current_part = line + '\n'
        if current_part:
            parts.append(current_part)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è
        for i, part in enumerate(parts):
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
            if i == len(parts) - 1:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                builder = InlineKeyboardBuilder()
                builder.button(text="üí° –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç", callback_data="get_advice")
                builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="view_profile")
                builder.adjust(1)
                
                await callback.message.answer(
                    part,
                    parse_mode="HTML",
                    reply_markup=builder.as_markup()
                )
            else:
                await callback.message.answer(
                    part,
                    parse_mode="HTML"
                )
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        builder = InlineKeyboardBuilder()
        builder.button(text="üí° –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç", callback_data="get_advice")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="view_profile")
        builder.adjust(1)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        await callback.message.answer(
            details_text,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ –¥–µ—Ç–∞–ª–µ–π
    await callback.message.answer(
        "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer("–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å")

@survey_router.callback_query(F.data == "view_profile")
async def view_profile_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        callback: Callback query
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    
    –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤–º–µ—Å—Ç–æ –∫—Ä–∞—Ç–∫–æ–π –≤–µ—Ä—Å–∏–∏.
    –ö–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" –∏ "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑" —É–¥–∞–ª–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.
    """
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await callback.message.bot.send_chat_action(chat_id=callback.message.chat.id, action="typing")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    profile_completed = user_data.get("profile_completed", False)
    
    if not profile_completed:
        # –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å
        builder = InlineKeyboardBuilder()
        builder.button(text="üìù –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data="start_survey")
        builder.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)
        
        await callback.message.answer(
            "‚ùå <b>–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å. "
            "–≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 5-10 –º–∏–Ω—É—Ç –∏ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏.",
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.answer(
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_keyboard()
        )
        
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    details_text = user_data.get("profile_details", "")
    
    if not details_text or len(details_text) < 20:
        await callback.message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.",
            parse_mode="HTML"
        )
        await callback.answer("–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
    builder = InlineKeyboardBuilder()
    builder.button(text="üí° –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç", callback_data="get_advice")
    builder.button(text="üîÑ –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ", callback_data="restart_survey")
    builder.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    max_message_length = 4000  # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–Ω–æ –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
    
    if len(details_text) > max_message_length:
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ —á–∞—Å—Ç–∏
        parts = []
        current_part = ""
        for line in details_text.split('\n'):
            if len(current_part) + len(line) + 1 <= max_message_length:
                current_part += line + '\n'
            else:
                parts.append(current_part)
                current_part = line + '\n'
        if current_part:
            parts.append(current_part)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è
        for i, part in enumerate(parts):
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
            if i == len(parts) - 1:
                await callback.message.answer(
                    part,
                    parse_mode="HTML",
                    reply_markup=builder.as_markup()
                )
            else:
                await callback.message.answer(
                    part,
                    parse_mode="HTML"
                )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        await callback.message.answer(
            details_text,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.answer(
        "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )
    
    await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
@survey_router.message(Command("survey"))
@survey_router.message(F.text == "üìù –û–ø—Ä–æ—Å")
async def command_survey(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /survey –∏ –∫–Ω–æ–ø–∫–∏ "–û–ø—Ä–æ—Å".
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    await start_survey(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ñ–∏–ª—è
@survey_router.message(Command("profile"))
@survey_router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def command_profile(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile –∏ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å".
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    
    –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ä–∞–∑—É
    –≤–º–µ—Å—Ç–æ –∫—Ä–∞—Ç–∫–æ–π –≤–µ—Ä—Å–∏–∏ –∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    profile_completed = user_data.get("profile_completed", False)
    
    if profile_completed:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        details_text = user_data.get("profile_details", "")
        
        if not details_text or len(details_text) < 20:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞:</b> –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.",
                parse_mode="HTML"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ", callback_data="restart_survey")
        builder.button(text="üí° –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç", callback_data="get_advice")
        builder.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        max_message_length = 4000  # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–Ω–æ –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
        
        if len(details_text) > max_message_length:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            current_part = ""
            for line in details_text.split('\n'):
                if len(current_part) + len(line) + 1 <= max_message_length:
                    current_part += line + '\n'
                else:
                    parts.append(current_part)
                    current_part = line + '\n'
            if current_part:
                parts.append(current_part)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è
            for i, part in enumerate(parts):
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
                if i == len(parts) - 1:
                    await message.answer(
                        part,
                        parse_mode="HTML",
                        reply_markup=builder.as_markup()
                    )
                else:
                    await message.answer(
                        part,
                        parse_mode="HTML"
                    )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            await message.answer(
                details_text,
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
        await state.set_state(ProfileStates.viewing)
    else:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="start_survey")
        
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ, –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å.",
            reply_markup=builder.as_markup()
        )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø—Ä–æ—Å–∞
@survey_router.message(Command("cancel"))
@survey_router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_survey_command(message: Message, state: FSMContext):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –æ–ø—Ä–æ—Å.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    current_state = await state.get_state()
    
    if current_state == SurveyStates.answering_questions:
        await state.clear()
        await message.answer(
            "‚ùå –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "‚ùì –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@survey_router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    
    Args:
        callback: Callback query
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(None)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.delete()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
        reply_markup=get_main_keyboard()
    )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–≤–µ—Ç–æ–≤
@survey_router.message(Command("advice"))
@survey_router.message(F.text == "üí° –°–æ–≤–µ—Ç—ã")
async def command_advice(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /advice –∏ –∫–Ω–æ–ø–∫–∏ "–°–æ–≤–µ—Ç—ã".
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    profile_completed = user_data.get("profile_completed", False)
    
    if profile_completed:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –µ—Å—Ç—å, –ø–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏
        personality_type = user_data.get("personality_type", "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏
        advice = get_personalized_advice(personality_type)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç
        await message.answer(
            f"üí° <b>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç</b>\n\n{advice}",
            parse_mode="HTML"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –ü–æ–ª—É—á–∏—Ç—å –¥—Ä—É–≥–æ–π —Å–æ–≤–µ—Ç", callback_data="get_advice")
        builder.button(text="üë§ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="view_profile")
        builder.button(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(1)
        
        await message.answer(
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=builder.as_markup()
        )
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="start_survey")
        
        await message.answer(
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –∏ —Å–æ–∑–¥–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.",
            reply_markup=builder.as_markup()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback "get_advice"
@survey_router.callback_query(F.data == "get_advice")
async def get_advice_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ callback.
    
    Args:
        callback: Callback query
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await callback.message.bot.send_chat_action(chat_id=callback.message.chat.id, action="typing")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    personality_type = user_data.get("personality_type", "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç
    advice = get_personalized_advice(personality_type)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç
    await callback.message.answer(
        f"üí° <b>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç</b>\n\n{advice}",
        parse_mode="HTML"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –ü–æ–ª—É—á–∏—Ç—å –¥—Ä—É–≥–æ–π —Å–æ–≤–µ—Ç", callback_data="get_advice")
    builder.button(text="üë§ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="view_profile")
    builder.button(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    
    await callback.message.answer(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=builder.as_markup()
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.answer(
        "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer("–°–æ–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤
def get_personalized_advice(personality_type: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏.
    
    Args:
        personality_type: –¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        str: –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç
    """
    # –°–ª–æ–≤–∞—Ä—å —Å —Å–æ–≤–µ—Ç–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ª–∏—á–Ω–æ—Å—Ç–∏
    advice_by_type = {
        "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π": [
            "üß† –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ 15-20 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å –¥–ª—è —á—Ç–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å —Ç–µ–º–µ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –≤–∞—à—É –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏.",
            "üß© –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–µ—Ç–æ–¥ ¬´–ø—è—Ç–∏ –ø–æ—á–µ–º—É¬ª –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–±–ª–µ–º—ã ‚Äî –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ¬´–ø–æ—á–µ–º—É¬ª –ø—è—Ç—å —Ä–∞–∑ –ø–æ–¥—Ä—è–¥, —á—Ç–æ–±—ã –¥–æ–∫–æ–ø–∞—Ç—å—Å—è –¥–æ –ø–µ—Ä–≤–æ–ø—Ä–∏—á–∏–Ω—ã.",
            "üìù –í—ã–¥–µ–ª–∏—Ç–µ 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–Ω–æ–º –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –¥–Ω—è. –ó–∞–ø–∏—à–∏—Ç–µ —Ç—Ä–∏ –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∑–Ω–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è, –∏ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å.",
            "üîÑ –ü—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É mind mapping (–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã). –û–Ω–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º —É–≤–∏–¥–µ—Ç—å —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –ø—Ä–æ–±–ª–µ–º—ã.",
            "‚è∏Ô∏è –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏, –ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –º–µ—Ç–æ–¥ ¬´–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞¬ª ‚Äî –æ–¥–∏–Ω –¥–µ–Ω—å –≤ –Ω–µ–¥–µ–ª—é –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–æ—Ü—Å–µ—Ç–µ–π.",
            "üéØ –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É ¬´–≥–ª—É–±–æ–∫–æ–π —Ä–∞–±–æ—Ç—ã¬ª ‚Äî –≤—ã–¥–µ–ª—è–π—Ç–µ 90 –º–∏–Ω—É—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É –±–µ–∑ –æ—Ç–≤–ª–µ—á–µ–Ω–∏–π, –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏–π.",
            "üìö –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –º–µ–∂–ø—Ä–µ–¥–º–µ—Ç–Ω—ã–µ —Å–≤—è–∑–∏: –∏–∑—É—á–∞–π—Ç–µ, –∫–∞–∫ –≤–∞—à–∞ –æ–±–ª–∞—Å—Ç—å –∑–Ω–∞–Ω–∏–π –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º–∏. –≠—Ç–æ —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ.",
            "ü§î –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–æ–≤—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–∏–∞–ª–æ–≥–∞: –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–π—Ç–∏ –∫ –≤—ã–≤–æ–¥–∞–º.",
            "üîç –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –º–æ–º–µ–Ω—Ç—ã, –∫–æ–≥–¥–∞ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –Ω–∞–∏–±–æ–ª—å—à–∏–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–¥—ä–µ–º. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã.",
            "üìñ –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è: –ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –∫–Ω–∏–≥–∏ –∏–ª–∏ —Å—Ç–∞—Ç—å–∏ –∑–∞–ø–∏—à–∏—Ç–µ 3-5 –∫–ª—é—á–µ–≤—ã—Ö –∏–¥–µ–π –∏ –∫–∞–∫ –∏—Ö –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å."
        ],
        "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π": [
            "üìì –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ ¬´—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫¬ª: –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –∏ –∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä—ã. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –∏ —Ä–µ–∞–∫—Ü–∏–∏.",
            "üßò –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É ¬´–¥—ã—Ö–∞–Ω–∏–µ 4-7-8¬ª: –≤–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞, –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 7, –≤—ã–¥–æ—Ö –Ω–∞ 8. –≠—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Å–Ω–∏–∂–∞–µ—Ç —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å –∏ –ø–æ–º–æ–≥–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å.",
            "üôè –í—ã–¥–µ–ª–∏—Ç–µ 5 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏: –∑–∞–ø–∏—à–∏—Ç–µ —Ç—Ä–∏ –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã. –≠—Ç–æ –ø–æ–≤—ã—à–∞–µ—Ç –æ–±—â–∏–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ–Ω.",
            "üå± –ï—Å–ª–∏ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–∏–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É ¬´—Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–∞–∑–µ–º–ª–µ–Ω–∏–µ¬ª: –Ω–∞–∑–æ–≤–∏—Ç–µ 5 –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤–∏–¥–∏—Ç–µ, 4 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–æ–≥–∞—Ç—å, 3 –∑–≤—É–∫–∞, 2 –∑–∞–ø–∞—Ö–∞ –∏ 1 –≤–∫—É—Å.",
            "üëÇ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–ª—É—à–∞–Ω–∏–µ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö: –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π—Ç–µ —Å–ª–æ–≤–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª–∏. –≠—Ç–æ —É–≥–ª—É–±–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–≤—è–∑—å.",
            "‚ù§Ô∏è –°–æ–∑–¥–∞–π—Ç–µ —Ä–∏—Ç—É–∞–ª —Å–∞–º–æ–∑–∞–±–æ—Ç—ã: –≤—ã–¥–µ–ª–∏—Ç–µ 15-20 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–±—è, –¥–ª—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤–∞–º —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ.",
            "üíå –ù–∞–ø–∏—à–∏—Ç–µ –ø–∏—Å—å–º–æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ–∫–∞–∑–∞–ª –Ω–∞ –≤–∞—Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ, –Ω–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –≤—ã—Ä–∞–∑–∏–ª–∏ —Å–≤–æ–µ–π –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –ø–æ–ª–Ω–æ–π –º–µ—Ä–µ.",
            "üåà –°–æ–∑–¥–∞–π—Ç–µ ¬´–±–∞–Ω–∫ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π¬ª: —Å–æ–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑—ã–≤–∞—é—Ç —É –≤–∞—Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏, –∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∏–º –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã.",
            "üó£Ô∏è –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ ¬´—á–µ—Å—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ¬ª: –≤—ã—Ä–∞–∂–∞–π—Ç–µ —Å–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –≥—Ä–∞–Ω–∏—Ü—ã –≤–µ–∂–ª–∏–≤–æ, –Ω–æ —á–µ—Ç–∫–æ, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É ¬´–Ø —á—É–≤—Å—Ç–≤—É—é... –∫–æ–≥–¥–∞... –ø–æ—Ç–æ–º—É —á—Ç–æ... –∏ –º–Ω–µ –Ω—É–∂–Ω–æ...¬ª.",
            "ü´Ç –ü—Ä–æ–≤–æ–¥–∏—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π ¬´—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫–∏–Ω¬ª —Å –±–ª–∏–∑–∫–∏–º–∏ –ª—é–¥—å–º–∏: –≤—ã–¥–µ–ª–∏—Ç–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —á—É–≤—Å—Ç–≤–∞—Ö –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è—Ö, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –æ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–µ–ª–∞—Ö."
        ],
        "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π": [
            "üê∏ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É ¬´–µ—à—å—Ç–µ –ª—è–≥—É—à–∫—É¬ª: –Ω–∞—á–∏–Ω–∞–π—Ç–µ –¥–µ–Ω—å —Å —Å–∞–º–æ–π —Å–ª–æ–∂–Ω–æ–π –∏ –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏, –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–π –¥–µ–Ω—å –ø—Ä–æ–π–¥–µ—Ç –±–æ–ª–µ–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ.",
            "‚è±Ô∏è –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ ¬´–¥–≤—É—Ö –º–∏–Ω—É—Ç¬ª: –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Ç—Ä–µ–±—É–µ—Ç –º–µ–Ω–µ–µ –¥–≤—É—Ö –º–∏–Ω—É—Ç, —Å–¥–µ–ª–∞–π—Ç–µ –µ–µ —Å—Ä–∞–∑—É, –Ω–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—è ‚Äî —ç—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç –≤–∞—à —Å–ø–∏—Å–æ–∫ –¥–µ–ª.",
            "‚úÖ –í–µ—á–µ—Ä–æ–º —Å–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–∑ —Ç—Ä–µ—Ö —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –∑–∞–≤—Ç—Ä–∞. –ù–µ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –¥—Ä—É–≥–∏–µ –¥–µ–ª–∞, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —ç—Ç–∏ —Ç—Ä–∏.",
            "üçÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É –ü–æ–º–æ–¥–æ—Ä–æ: —Ä–∞–±–æ—Ç–∞–π—Ç–µ 25 –º–∏–Ω—É—Ç, –∑–∞—Ç–µ–º —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤ 5 –º–∏–Ω—É—Ç. –ü–æ—Å–ª–µ —á–µ—Ç—ã—Ä–µ—Ö —Ç–∞–∫–∏—Ö —Ü–∏–∫–ª–æ–≤ —Å–¥–µ–ª–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ 15-30 –º–∏–Ω—É—Ç.",
            "üßπ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É ¬´–≤—Å–µ –∏–º–µ–µ—Ç —Å–≤–æ–µ –º–µ—Å—Ç–æ¬ª: —Ä–µ–≥—É–ª—è—Ä–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ –∏—Ö –º–µ—Å—Ç–∞, —ç—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É.",
            "üìä –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø –ü–∞—Ä–µ—Ç–æ (80/20): –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –∫–∞–∫–∏–µ 20% –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏–Ω–æ—Å—è—Ç 80% —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –Ω–∏—Ö.",
            "üö´ –í–Ω–µ–¥—Ä–∏—Ç–µ ¬´—Ç–∞–π–º-–±–ª–æ–∫–∏—Ä–æ–≤–∫—É¬ª: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å 10:00 –¥–æ 12:00), –∫–æ–≥–¥–∞ –≤–∞—Å –Ω–µ–ª—å–∑—è –±–µ—Å–ø–æ–∫–æ–∏—Ç—å, –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è –≥–ª—É–±–æ–∫–æ–π —Ä–∞–±–æ—Ç—ã.",
            "üìã –°–æ–∑–¥–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞: –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, –æ—Ü–µ–Ω–∏–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é.",
            "üóÇÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ ¬´–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤¬ª: –≥—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞—á–∏ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–¥–æ–º–∞, –≤ –æ—Ñ–∏—Å–µ, –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É, –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º) –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.",
            "üö∂‚Äç‚ôÇÔ∏è –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ ¬´–ø—Ä–æ–≥—É–ª–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º¬ª: –º–Ω–æ–≥–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ª—é–¥–∏ (–æ—Ç –°—Ç–∏–≤–∞ –î–∂–æ–±—Å–∞ –¥–æ –ß–∞—Ä–ª—å–∑–∞ –î–∞—Ä–≤–∏–Ω–∞) –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞–ª–∏ –ø—Ä–æ–≥—É–ª–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —è—Å–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è –∏ —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á."
        ],
        "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π": [
            "üìù –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ ¬´—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã¬ª: –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ —Ç—Ä–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –≠—Ç–æ —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç —Ç–≤–æ—Ä—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ.",
            "üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É ¬´—Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ¬ª: –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≤—è–∑–∞—Ç—å –µ–≥–æ —Å –∑–∞–¥–∞—á–µ–π, –Ω–∞–¥ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–µ –∏–¥–µ–∏.",
            "üé® –£–¥–µ–ª–∏—Ç–µ 15 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å —Ç–≤–æ—Ä—á–µ—Å–∫–æ–º—É —Ö–æ–±–±–∏, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–æ–º—É —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π: —Ä–∏—Å–æ–≤–∞–Ω–∏–µ, –∏–≥—Ä–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ, –ª–µ–ø–∫–∞. –≠—Ç–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–≤—è–∑–∏.",
            "üß† –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å ¬´–º–æ–∑–≥–æ–≤—ã–º —à—Ç—É—Ä–º–æ–º –Ω–∞–æ–±–æ—Ä–æ—Ç¬ª: –≤–º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏–π, —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –≤—Å–µ —Å–ø–æ—Å–æ–±—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ —É—Å—É–≥—É–±–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É. –ó–∞—Ç–µ–º –ø–æ–º–µ–Ω—è–π—Ç–µ –∏—Ö –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ.",
            "üö∂‚Äç‚ôÄÔ∏è –°–º–µ–Ω–∏—Ç–µ –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏: —Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ, –≤—ã–π–¥–∏—Ç–µ –≤ –ø–∞—Ä–∫, –ø–æ—Å–µ—Ç–∏—Ç–µ –º—É–∑–µ–π –∏–ª–∏ –≥–∞–ª–µ—Ä–µ—é. –ù–æ–≤—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å—Ç–∏–º—É–ª—ã —Å–ø–æ—Å–æ–±—Å—Ç–≤—É—é—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π.",
            "üåà –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Å–∏–Ω–µ—Å—Ç–µ–∑–∏—é —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ ¬´–Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å¬ª –º—É–∑—ã–∫—É, ¬´–Ω–∞–ø–∏—Å–∞—Ç—å¬ª –≤–∫—É—Å –∏–ª–∏ ¬´—Å–æ—á–∏–Ω–∏—Ç—å¬ª —Ü–≤–µ—Ç. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–≤—è–∑–∏.",
            "üß© –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É SCAMPER –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∏–¥–µ–π: Substitute (–∑–∞–º–µ–Ω–∏—Ç–µ), Combine (–æ–±—ä–µ–¥–∏–Ω–∏—Ç–µ), Adapt (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ), Modify (–∏–∑–º–µ–Ω–∏—Ç–µ), Put to another use (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ-–¥—Ä—É–≥–æ–º—É), Eliminate (—É–±–µ—Ä–∏—Ç–µ), Reverse (–ø–µ—Ä–µ–≤–µ—Ä–Ω–∏—Ç–µ).",
            "üé≠ –ü—Ä–∏–º–µ—Ä—å—Ç–µ –Ω–∞ —Å–µ–±—è —Ä–æ–ª—å –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞: –∫–∞–∫ –±—ã –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É —Ä–µ—à–∏–ª —Ö—É–¥–æ–∂–Ω–∏–∫? –ò–Ω–∂–µ–Ω–µ—Ä? –†–µ–±–µ–Ω–æ–∫? –°–º–µ–Ω–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —á–∞—Å—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø—Ä–æ—Ä—ã–≤–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º.",
            "üß† –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ ¬´–Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è¬ª: —Å–æ–µ–¥–∏–Ω–∏—Ç–µ –¥–≤–µ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∏–¥–µ–∏ –∏ –ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –Ω–∞–π—Ç–∏ –≤ —ç—Ç–æ–º —Å–º—ã—Å–ª. –ù–∞–ø—Ä–∏–º–µ—Ä, ¬´–∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –∫–æ–ª–µ—Å–æ¬ª –º–æ–∂–µ—Ç –Ω–∞—Ç–æ–ª–∫–Ω—É—Ç—å –Ω–∞ –∏–¥–µ—é –≥—É—Å–µ–Ω–∏—á–Ω–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞.",
            "üóÇÔ∏è –°–æ–∑–¥–∞–π—Ç–µ ¬´–∫–æ–ª–ª–µ–∫—Ü–∏—é –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è¬ª: —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ü–∏—Ç–∞—Ç—ã, —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –º—É–∑—ã–∫–∏ –∏ –≤—Å–µ, —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —É –≤–∞—Å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –æ—Ç–∫–ª–∏–∫, –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ. –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–µ–π, –∫–æ–≥–¥–∞ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –∑–∞—Å—Ç–æ–π."
        ]
    }
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏
    advice_list = advice_by_type.get(personality_type, advice_by_type["–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π"])
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç
    import random
    advice = random.choice(advice_list)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç
    logger.info(f"–í—ã–±—Ä–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –¥–ª—è —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ {personality_type}")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–≤–µ—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    formatted_advice = f"{advice}"
    
    return formatted_advice

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback "start_survey"
@survey_router.callback_query(F.data == "start_survey")
async def start_survey_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ callback.
    
    Args:
        callback: Callback query
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    await callback.message.delete()
    await start_survey(callback.message, state)
    await callback.answer("–ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å")

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π –æ—Ç–≤–µ—Ç–æ–≤
async def test_interpretations():
    """
    –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π –æ—Ç–≤–µ—Ç–æ–≤.
    """
    from questions import get_all_vasini_questions
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    vasini_questions = get_all_vasini_questions()
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∞
    test_question = vasini_questions[0]
    print(f"–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: {test_question['text']}")
    
    # –í—ã–≤–æ–¥–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    for option, text in test_question['options'].items():
        print(f"{option}: {text}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ A
    option = "A"
    try:
        interpretation = test_question["interpretations"][option]
        print(f"\n–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ {option}:\n{interpretation}")
        print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞! –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
if __name__ == "__main__":
    import asyncio
    asyncio.run(test_interpretations()) 