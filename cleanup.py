#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞.
–ó–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ TelegramAPI.
"""

import os
import sys
import tempfile
import socket
import time
import signal
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - [CLEANUP] - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler("cleanup.log")
    ]
)
logger = logging.getLogger("cleanup")

def cleanup_lock_file():
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    lock_file = os.path.join(tempfile.gettempdir(), 'ona_bot.lock')
    
    if os.path.exists(lock_file):
        try:
            os.remove(lock_file)
            logger.info(f"–§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ {lock_file} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            print(f"‚úÖ –§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ {lock_file} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
    else:
        logger.info(f"–§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ {lock_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print(f"‚ÑπÔ∏è –§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ {lock_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")

def cleanup_socket():
    """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –ø–æ—Ä—Ç —Å–æ–∫–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –∑–∞–Ω—è—Ç."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç 50000
        test_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        test_socket.bind(('localhost', 50000))
        test_socket.close()
        logger.info("–ü–æ—Ä—Ç 50000 —Å–≤–æ–±–æ–¥–µ–Ω")
        print("‚ÑπÔ∏è –ü–æ—Ä—Ç 50000 —Å–≤–æ–±–æ–¥–µ–Ω")
    except socket.error:
        logger.warning("–ü–æ—Ä—Ç 50000 –∑–∞–Ω—è—Ç, –ø–æ–ø—ã—Ç–∫–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å...")
        print("‚ö†Ô∏è –ü–æ—Ä—Ç 50000 –∑–∞–Ω—è—Ç, –ø–æ–ø—ã—Ç–∫–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å...")
        
        # –ù–∞ Windows –Ω–∞–π—Ç–∏ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç 50000
        if sys.platform == 'win32':
            try:
                import subprocess
                # –ù–∞—Ö–æ–¥–∏–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç 50000
                result = subprocess.run(
                    ['netstat', '-ano', '|', 'findstr', ':50000'],
                    capture_output=True, 
                    text=True, 
                    shell=True
                )
                output = result.stdout.strip()
                
                if output:
                    lines = output.split('\n')
                    for line in lines:
                        parts = line.split()
                        if len(parts) >= 5:
                            pid = parts[-1]
                            try:
                                pid = int(pid)
                                logger.info(f"–ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å —Å PID {pid}, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç 50000")
                                print(f"üîç –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å —Å PID {pid}, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç 50000")
                                
                                # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                                os.kill(pid, signal.SIGTERM)
                                time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                                try:
                                    os.kill(pid, 0)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                                    logger.warning(f"–ü—Ä–æ—Ü–µ—Å—Å {pid} –≤—Å–µ –µ—â–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
                                    print(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å {pid} –≤—Å–µ –µ—â–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
                                    os.kill(pid, signal.SIGKILL)
                                except OSError:
                                    logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å {pid} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                                    print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {pid} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                            except ValueError:
                                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å PID {pid} –≤ —á–∏—Å–ª–æ")
                                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å PID {pid} –≤ —á–∏—Å–ª–æ")
                            except OSError as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {pid}: {e}")
                                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {pid}: {e}")
                else:
                    logger.info("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –ø–æ—Ä—Ç 50000")
                    print("‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –ø–æ—Ä—Ç 50000")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")

def cleanup_bot_processes():
    """–ù–∞—Ö–æ–¥–∏—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å –±–æ—Ç–æ–º."""
    try:
        import psutil
        bot_processes = []
        
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                proc_info = proc.info
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–º Python –∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –æ–Ω –∫ –±–æ—Ç—É
                if proc_info['name'] and 'python' in proc_info['name'].lower():
                    cmdline = ' '.join(proc_info['cmdline'] or [])
                    if 'main.py' in cmdline or 'restart_bot.py' in cmdline:
                        if proc.pid != os.getpid():  # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
                            bot_processes.append(proc)
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        for proc in bot_processes:
            try:
                proc_name = ' '.join(proc.cmdline())
                logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞: {proc.pid} ({proc_name})")
                print(f"üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞: {proc.pid} ({proc_name})")
                
                proc.terminate()
                time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                if proc.is_running():
                    logger.warning(f"–ü—Ä–æ—Ü–µ—Å—Å {proc.pid} –≤—Å–µ –µ—â–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
                    print(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å {proc.pid} –≤—Å–µ –µ—â–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
                    proc.kill()
                else:
                    logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å {proc.pid} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                    print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {proc.pid} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {proc.pid}: {e}")
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {proc.pid}: {e}")
        
        if not bot_processes:
            logger.info("–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    except ImportError:
        logger.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞")
        print("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    print("=" * 50)
    print("–û–ß–ò–°–¢–ö–ê –ë–û–¢–ê ONA - –£–°–¢–†–ê–ù–ï–ù–ò–ï –ö–û–ù–§–õ–ò–ö–¢–û–í")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    cleanup_lock_file()
    cleanup_socket()
    cleanup_bot_processes()
    
    print("\n" + "=" * 50)
    print("–û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:")
    print("python restart_bot.py")
    print("=" * 50) 