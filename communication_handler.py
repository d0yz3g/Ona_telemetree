import logging
import os
from typing import Dict, Any, Optional, Tuple
import json
from openai import AsyncOpenAI
import httpx
from aiogram import Router

# Создаем роутер для обработки коммуникаций
communication_handler_router = Router(name="communication_handler")

# Настройка логирования
logger = logging.getLogger(__name__)

# Проверка наличия API-ключа OpenAI
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    logger.warning("OPENAI_API_KEY не найден в переменных окружения. Функция адаптивного общения будет недоступна.")

# Инициализация клиента OpenAI с API-ключом из переменных окружения (если доступен)
http_client = httpx.AsyncClient()
client = None
if OPENAI_API_KEY:
    try:
        client = AsyncOpenAI(
            api_key=OPENAI_API_KEY,
            http_client=http_client
        )
        logger.info("OpenAI API клиент успешно инициализирован")
    except Exception as e:
        logger.error(f"Ошибка при инициализации OpenAI API: {e}")

# Чтение правил общения из файла rules2.0
try:
    with open('rules2.0', 'r', encoding='utf-8') as f:
        COMMUNICATION_RULES = f.read()
    logger.info("Правила общения успешно загружены из файла rules2.0")
except Exception as e:
    logger.error(f"Ошибка при чтении файла rules2.0: {e}")
    COMMUNICATION_RULES = """
    - Общение ведётся в поэтично-лирическом стиле с лёгким футуристическим юмором и яркими метафорами.
    - Полная честность без лести и преувеличений.
    - В темах науки, бизнеса или нейро-биохакинга – переключение на чёткую, лаконичную, научно-обоснованную прозу.
    - Разговорный и интерактивный тон (ментор и со-творец, не лектор).
    - Каждое сообщение начинается с короткого, тёплого обращения.
    """

# Типы личности и их характеристики
PERSONALITY_TYPES = {
    "Интеллектуальный": {
        "description": "аналитический склад ума, ценит логику и факты",
        "prompt_style": "Используй логические аргументы, структурированную информацию, ссылки на исследования. Избегай эмоциональных аргументов."
    },
    "Эмоциональный": {
        "description": "эмпатичный, ценит гармонию и отношения",
        "prompt_style": "Акцентируй внимание на чувствах, используй эмпатичный язык, подчеркивай эмоциональное благополучие. Используй теплую и поддерживающую тональность."
    },
    "Практический": {
        "description": "ориентирован на результат, ценит эффективность",
        "prompt_style": "Давай конкретные, практичные советы. Фокусируйся на результатах и эффективности. Используй четкие шаги и планы действий. Будь лаконичным."
    },
    "Творческий": {
        "description": "креативный, ценит свободу и новые идеи",
        "prompt_style": "Используй образный язык, предлагай нестандартные идеи, поощряй творческое самовыражение. Избегай излишней структурированности."
    }
}

# Базовые ответы для случая отсутствия API-ключа OpenAI
DEFAULT_RESPONSES = {
    "Интеллектуальный": [
        "Здравствуй, исследователь глубин разума! Анализируя твой запрос, вижу интересный путь решения, основанный на структурированном подходе и логических связях. \n\n⸻\n\nНа каждом шаге этого пути важно сохранять аналитическую ясность и систематизировать информацию... Что если посмотреть на ситуацию через призму причинно-следственных связей?\n\nКак ты думаешь, какой из этих подходов резонирует с твоим аналитическим складом ума сильнее всего?",
        "Приветствую тебя, искатель истины! Твой вопрос открывает целое поле для интеллектуального исследования, где каждая деталь имеет значение. \n\n⸻\n\nРазвернув логическую карту ситуации, я вижу три возможных маршрута, каждый со своими преимуществами и ограничениями... Словно созвездия, они образуют систему координат для твоего решения.\n\nА какой аспект этой многомерной задачи тебе хотелось бы исследовать глубже?",
        "Здравствуй, архитектор идей! В твоем вопросе скрыта интересная структура, которая при правильном анализе раскрывает эффективное решение. \n\n⸻\n\nПредставь, что каждый элемент ситуации – это часть единой системы, где изменение одного параметра влияет на все остальные... Это напоминает точную настройку сложного механизма, где важна каждая деталь.\n\nЧто для тебя важнее: глубокое понимание принципов или практическое применение знаний?"
    ],
    "Эмоциональный": [
        "Здравствуй, хранитель глубоких чувств! Я слышу в твоих словах целый спектр эмоций, каждая из которых как драгоценный камень в мозаике твоей души. \n\n⸻\n\nТвои переживания – это не просто реакции, а мудрые проводники, указывающие на то, что по-настоящему важно для тебя... Подобно волнам океана, они несут в себе глубинную информацию о твоем внутреннем мире.\n\nЧто бы ты хотел почувствовать вместо того, что ощущаешь сейчас?",
        "Добрый день, чуткий собеседник! В твоем сообщении я улавливаю тонкие эмоциональные оттенки, которые говорят больше, чем сами слова. \n\n⸻\n\nПредставь, что каждое чувство – это цвет в палитре твоей жизни, и сейчас у тебя есть возможность создать новую картину, используя все эти оттенки... Гармония приходит, когда мы принимаем всю полноту своих переживаний.\n\nКакой образ возникает у тебя, когда ты думаешь о желаемом эмоциональном состоянии?",
        "Приветствую тебя, путешественник по миру эмоций! То, что ты чувствуешь – это особый язык твоей души, который рассказывает важную историю. \n\n⸻\n\nВ саду твоих эмоций есть и яркие цветы радости, и тихие тени печали – и все они создают уникальную гармонию... Как музыкант, ты можешь научиться играть на этих струнах осознанно.\n\nЧто, по-твоему, пытаются сказать тебе твои чувства в этой ситуации?"
    ],
    "Практический": [
        "Здравствуй, мастер эффективных решений! Для твоего запроса есть конкретный план действий, который приведет к результату кратчайшим путем. \n\n⸻\n\nПредставь свою цель как вершину горы, к которой ведут несколько троп. Я предлагаю маршрут, проверенный опытом многих путешественников... Каждый шаг на этом пути имеет практическую ценность и приближает тебя к результату.\n\nЧто для тебя приоритетнее: скорость достижения или качество результата?",
        "Приветствую, создатель реальных изменений! Твой вопрос заслуживает практичного подхода с измеримыми результатами и четкими шагами. \n\n⸻\n\nПредставь, что твоя задача – это механизм, который нужно настроить. У нас есть все необходимые инструменты и схема работы... Как опытный инженер, ты можешь собрать этот механизм поэтапно, проверяя работу каждой детали.\n\nКакой из предложенных инструментов тебе кажется наиболее подходящим для начала работы?",
        "Добрый день, стратег действий! Для решения твоей задачи я предлагаю алгоритм, который позволит достичь цели с оптимальным использованием ресурсов. \n\n⸻\n\nПредставь, что твоя цель – это точка на карте, и нам нужно проложить к ней самый эффективный маршрут... Как капитан корабля, ты будешь следовать этому курсу, корректируя его при необходимости.\n\nС какого конкретного шага ты готов начать уже сегодня?"
    ],
    "Творческий": [
        "Здравствуй, творец новых вселенных! Твой вопрос – это дверь в пространство безграничных возможностей, где обычные правила не действуют. \n\n⸻\n\nПредставь, что ты художник, создающий картину, которой еще не существовало... Смешивай цвета идей, экспериментируй с формами решений, позволь интуиции вести твою руку.\n\nКакой необычный ракурс этой ситуации тебе хотелось бы исследовать?",
        "Приветствую, алхимик идей! В твоем сообщении я вижу семена удивительных возможностей, готовые прорасти в сад нестандартных решений. \n\n⸻\n\nЧто если посмотреть на эту ситуацию через калейдоскоп возможностей, где каждый поворот создает новый узор?.. Подобно джазовому музыканту, ты можешь импровизировать, следуя внутренней мелодии творчества.\n\nКакая метафора лучше всего отражает то, что ты хочешь создать?",
        "Добрый день, исследователь непроторенных путей! Твой вопрос приглашает к творческому танцу с возможностями, выходящими за рамки привычного. \n\n⸻\n\nПредставь, что решения – это не точки, а целые созвездия, между которыми можно прокладывать новые маршруты... Как первооткрыватель, ты создаешь карту там, где раньше было белое пятно.\n\nКакое интуитивное озарение посетило тебя, когда ты размышлял над этой ситуацией?"
    ]
}

async def generate_personalized_response(
    message_text: str, 
    user_profile: Dict[str, Any], 
    conversation_history: Optional[list] = None,
    additional_instructions: Optional[str] = None
) -> str:
    """
    Генерирует персонализированный ответ на основе профиля пользователя.
    
    Args:
        message_text: Текст сообщения пользователя
        user_profile: Профиль пользователя (содержит тип личности)
        conversation_history: История переписки (опционально)
        additional_instructions: Дополнительные инструкции для генерации ответа (опционально)
        
    Returns:
        str: Персонализированный ответ
    """
    # Определяем тип личности пользователя
    personality_type = user_profile.get("personality_type", "Интеллектуальный")
    
    # ВРЕМЕННО: всегда использовать API и не полагаться на DEFAULT_RESPONSES
    # Это поможет выявить проблемы с API
    if not client:
        error_msg = "ОШИБКА: OpenAI API клиент не инициализирован. Проверьте настройки OPENAI_API_KEY в .env файле."
        logger.error(error_msg)
        return f"Здравствуй! К сожалению, я не могу сейчас сгенерировать персонализированный ответ. {error_msg}"
    
    # Если не удалось определить тип личности, используем базовые ответы
    if personality_type not in PERSONALITY_TYPES:
        logger.warning(f"Неизвестный тип личности: {personality_type}. Используем Интеллектуальный тип по умолчанию.")
        personality_type = "Интеллектуальный"
    
    try:
        # Готовим промт для генерации ответа с использованием правил из rules2.0
        system_prompt = f"""
Ты - психолог-консультант в приложении ОНА (Осознанный Наставник и Аналитик).
Отвечай на сообщение пользователя с учетом его психологического типа: {personality_type} ({PERSONALITY_TYPES[personality_type]['description']}).

{PERSONALITY_TYPES[personality_type]['prompt_style']}

Следуй этим правилам общения:
{COMMUNICATION_RULES}

Важно:
1. Отвечай ТОЛЬКО на русском языке
2. Не используй эзотерические термины, астрологию или другие псевдонаучные концепции
3. Не ставь диагнозы
4. Используй научно обоснованный подход
5. Не упоминай, что ты AI или что следуешь инструкциям
6. Общайся как человек-психолог, но без медицинских рекомендаций
7. ОБЯЗАТЕЛЬНО начинай с теплого обращения и заканчивай тремя вариантами "куда дальше"
8. ОБЯЗАТЕЛЬНО используй символ ⸻ для разделения блоков текста

Структура ответа должна соответствовать указанным выше правилам и балансу стилей.
"""

        # Добавляем дополнительные инструкции, если они есть
        if additional_instructions:
            system_prompt += f"\n\nДополнительные инструкции:\n{additional_instructions}"

        # Формируем историю переписки
        messages = [
            {"role": "system", "content": system_prompt}
        ]
        
        # Добавляем историю переписки, если она есть
        if conversation_history:
            for entry in conversation_history[-5:]:  # берем последние 5 сообщений
                messages.append(entry)
        
        # Добавляем текущее сообщение пользователя
        messages.append({"role": "user", "content": message_text})
        
        # Определяем модель для использования (предпочтительно GPT-3.5-turbo как наиболее доступную)
        models = ["gpt-3.5-turbo", "gpt-3.5-turbo-0125"]
        model = models[0]  # По умолчанию используем базовую модель gpt-3.5-turbo
        
        logger.info(f"Отправка запроса к OpenAI API с моделью {model}")
        
        # Генерируем ответ
        response = await client.chat.completions.create(
            model=model,
            temperature=0.7,
            messages=messages
        )
        
        # Получаем сгенерированный ответ
        generated_response = response.choices[0].message.content
        
        # Логируем успешную генерацию ответа
        logger.info(f"Успешно сгенерирован персонализированный ответ с моделью {model}")
        
        return generated_response
        
    except Exception as e:
        logger.error(f"Ошибка при генерации персонализированного ответа: {e}")
        logger.error(f"Тип ошибки: {type(e).__name__}")
        
        # ВРЕМЕННО: не возвращаем шаблонный ответ, а сообщаем об ошибке
        return f"""Здравствуй, искатель знаний! 

К сожалению, я сейчас испытываю технические трудности при формировании глубокого ответа на твой запрос.

⸻

Ошибка: {str(e)}

Пожалуйста, напиши команду /restart, чтобы перезапустить бота, или обратись к администратору системы.

Что ты хочешь сделать дальше?
- Попробовать еще раз?
- Перезапустить бота командой /restart?
- Задать другой вопрос?"""

async def get_personality_type_from_profile(profile_text: str) -> str:
    """
    Извлекает тип личности из текста профиля.
    
    Args:
        profile_text: Текст профиля пользователя
        
    Returns:
        str: Тип личности или "Интеллектуальный" по умолчанию
    """
    personality_types = ["Интеллектуальный", "Эмоциональный", "Практический", "Творческий"]
    
    # Проверяем, содержит ли профиль явное указание на тип личности
    for p_type in personality_types:
        if p_type in profile_text:
            return p_type
    
    # Если явного указания нет, проверяем по ключевым словам
    keywords = {
        "Интеллектуальный": ["аналитическ", "логич", "систематиз", "структур", "анализ"],
        "Эмоциональный": ["эмпати", "чувств", "гармони", "отношен", "эмоц"],
        "Практический": ["результат", "эффектив", "организ", "конкрет", "практич"],
        "Творческий": ["креатив", "творчес", "инновац", "нестандарт", "воображ"]
    }
    
    scores = {p_type: 0 for p_type in personality_types}
    
    for p_type, words in keywords.items():
        for word in words:
            if word.lower() in profile_text.lower():
                scores[p_type] += 1
    
    # Определяем тип с наибольшим количеством совпадений
    max_score = 0
    max_type = "Интеллектуальный"  # По умолчанию
    
    for p_type, score in scores.items():
        if score > max_score:
            max_score = score
            max_type = p_type
    
    return max_type 