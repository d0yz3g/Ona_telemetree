import logging
import os
import asyncio
from typing import Dict, Any, Optional
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from button_states import ReminderStates
from survey_handler import get_main_keyboard
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminder_router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
# {user_id: {"time": "HH:MM", "days": ["mon", "tue", ...], "active": True}}
reminder_users = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def get_reminder_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
    builder.button(text="‚úÖ –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="reminder_on")
    builder.button(text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="reminder_off")
    builder.button(text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="reminder_set_time")
    builder.button(text="üìÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏", callback_data="reminder_set_days")
    builder.button(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º", callback_data="reminder_help")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫
    builder.adjust(1)
    
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def get_time_selection_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
    times = ["08:00", "12:00", "16:00", "20:00", "22:00"]
    
    for time in times:
        builder.button(text=time, callback_data=f"time_{time}")
    
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="reminder_menu")
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Å—Ç—Ä–æ–∫–µ
    builder.adjust(3, 2, 1)
    
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
def get_days_selection_keyboard(selected_days=None) -> InlineKeyboardMarkup:
    if selected_days is None:
        selected_days = []
    
    builder = InlineKeyboardBuilder()
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days = [
        ("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "mon"), ("–í—Ç–æ—Ä–Ω–∏–∫", "tue"), ("–°—Ä–µ–¥–∞", "wed"),
        ("–ß–µ—Ç–≤–µ—Ä–≥", "thu"), ("–ü—è—Ç–Ω–∏—Ü–∞", "fri"), ("–°—É–±–±–æ—Ç–∞", "sat"), ("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "sun")
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —Å —á–µ—Ç–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
    for day_name, day_code in days:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π
        status = "‚úÖ –í—ã–±—Ä–∞–Ω–æ" if day_code in selected_days else "‚¨úÔ∏è –ù–µ –≤—ã–±—Ä–∞–Ω–æ"
        builder.button(
            text=f"{day_name} - {status}",
            callback_data=f"day_{day_code}"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    builder.button(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="days_save")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="reminder_menu")
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –∑–∞—Ç–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    builder.adjust(1)
    
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(bot: Bot, user_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        bot: –ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
    """
    try:
        await bot.send_message(
            chat_id=user_id,
            text="üßò <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∞–∫—Ç–∏–∫–µ</b>\n\n"
                 "–ü—Ä–∏–≤–µ—Ç! –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è —Å–µ–±–µ —Å–µ–≥–æ–¥–Ω—è. "
                 "–ú–µ–¥–∏—Ç–∞—Ü–∏—è –∏–ª–∏ –¥—Ä—É–≥–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º "
                 "—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ.",
            parse_mode="HTML"
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@reminder_router.message(Command("reminders"))
@reminder_router.message(F.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def cmd_reminders(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reminders –∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è".
    """
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    reminder_info = reminder_users.get(user_id, None)
    
    if reminder_info and reminder_info.get("active", False):
        time = reminder_info.get("time", "20:00")
        days = reminder_info.get("days", ["mon", "tue", "wed", "thu", "fri", "sat", "sun"])
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥—ã –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –≤ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        day_names = {
            "mon": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "tue": "–≤—Ç–æ—Ä–Ω–∏–∫", "wed": "—Å—Ä–µ–¥—É", 
            "thu": "—á–µ—Ç–≤–µ—Ä–≥", "fri": "–ø—è—Ç–Ω–∏—Ü—É", "sat": "—Å—É–±–±–æ—Ç—É", "sun": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }
        days_text = ", ".join([day_names[day] for day in days])
        
        status_text = f"‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã</b>\n\n–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ {time} –≤ {days_text}."
    else:
        status_text = "‚ùå <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã</b>\n\n–í–∫–ª—é—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö."
    
    await message.answer(
        "‚è∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏</b>\n\n"
        f"{status_text}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:",
        reply_markup=get_reminder_keyboard(),
        parse_mode="HTML"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    await state.set_state(ReminderStates.main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@reminder_router.callback_query(F.data == "reminder_on")
async def reminder_on(callback: CallbackQuery, state: FSMContext):
    """
    –í–∫–ª—é—á–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if user_id not in reminder_users:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        default_time = os.getenv("DEFAULT_REMINDER_TIME", "20:00")
        hour, minute = map(int, default_time.split(":"))
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        reminder_users[user_id] = {
            "time": default_time,
            "days": ["mon", "tue", "wed", "thu", "fri", "sat", "sun"],
            "active": True
        }
    else:
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        reminder_users[user_id]["active"] = True
        default_time = reminder_users[user_id]["time"]
        hour, minute = map(int, default_time.split(":"))
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–¥–∞—á–∏
    job_id = f"reminder_{user_id}"
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if scheduler.get_job(job_id):
        scheduler.remove_job(job_id)
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ APScheduler
    days = reminder_users[user_id]["days"]
    day_of_week = ",".join(days)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.add_job(
        send_reminder,
        CronTrigger(hour=hour, minute=minute, day_of_week=day_of_week),
        id=job_id,
        args=[callback.bot, user_id],
        replace_existing=True
    )
    
    # –ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    if not scheduler.running:
        scheduler.start()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    day_names = {
        "mon": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "tue": "–≤—Ç–æ—Ä–Ω–∏–∫", "wed": "—Å—Ä–µ–¥—É", 
        "thu": "—á–µ—Ç–≤–µ—Ä–≥", "fri": "–ø—è—Ç–Ω–∏—Ü—É", "sat": "—Å—É–±–±–æ—Ç—É", "sun": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    days_text = ", ".join([day_names[day] for day in days])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    await callback.message.edit_text(
        f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã</b>\n\n"
        f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö –≤ {default_time} –≤ {days_text}.",
        reply_markup=get_reminder_keyboard(),
        parse_mode="HTML"
    )
    
    await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–∫–ª—é—á–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ {default_time} –≤ –¥–Ω–∏: {days}")

@reminder_router.callback_query(F.data == "reminder_off")
async def reminder_off(callback: CallbackQuery):
    """
    –û—Ç–∫–ª—é—á–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if user_id in reminder_users:
        reminder_users[user_id]["active"] = False
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    job_id = f"reminder_{user_id}"
    if scheduler.get_job(job_id):
        scheduler.remove_job(job_id)
        logger.info(f"–ó–∞–¥–∞—á–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {job_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
    
    await callback.message.edit_text(
        "‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã</b>\n\n"
        "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö. "
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.",
        reply_markup=get_reminder_keyboard(),
        parse_mode="HTML"
    )
    
    await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª—é—á–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

@reminder_router.callback_query(F.data == "reminder_set_time")
async def set_reminder_time(callback: CallbackQuery, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    """
    await callback.message.edit_text(
        "‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
        "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö?",
        reply_markup=get_time_selection_keyboard(),
        parse_mode="HTML"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    await state.set_state(ReminderStates.selecting_time)
    
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

@reminder_router.callback_query(F.data.startswith("time_"))
async def process_time_selection(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    """
    user_id = callback.from_user.id
    selected_time = callback.data.split("_")[1]
    hour, minute = map(int, selected_time.split(":"))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if user_id not in reminder_users:
        reminder_users[user_id] = {
            "time": selected_time,
            "days": ["mon", "tue", "wed", "thu", "fri", "sat", "sun"],
            "active": True
        }
    else:
        reminder_users[user_id]["time"] = selected_time
        reminder_users[user_id]["active"] = True
    
    # –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
    job_id = f"reminder_{user_id}"
    if scheduler.get_job(job_id):
        scheduler.remove_job(job_id)
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ APScheduler
    days = reminder_users[user_id]["days"]
    day_of_week = ",".join(days)
    
    scheduler.add_job(
        send_reminder,
        CronTrigger(hour=hour, minute=minute, day_of_week=day_of_week),
        id=job_id,
        args=[callback.bot, user_id],
        replace_existing=True
    )
    
    # –ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    if not scheduler.running:
        scheduler.start()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    day_names = {
        "mon": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "tue": "–≤—Ç–æ—Ä–Ω–∏–∫", "wed": "—Å—Ä–µ–¥—É", 
        "thu": "—á–µ—Ç–≤–µ—Ä–≥", "fri": "–ø—è—Ç–Ω–∏—Ü—É", "sat": "—Å—É–±–±–æ—Ç—É", "sun": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    days_text = ", ".join([day_names[day] for day in days])
    
    await callback.message.edit_text(
        f"‚è∞ <b>–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ</b>\n\n"
        f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö –≤ {selected_time} –≤ {days_text}.",
        reply_markup=get_reminder_keyboard(),
        parse_mode="HTML"
    )
    
    await callback.answer(f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {selected_time}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ {selected_time}")

@reminder_router.callback_query(F.data == "reminder_set_days")
async def set_reminder_days(callback: CallbackQuery, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
    """
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏ –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –¥–Ω–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    selected_days = reminder_users.get(user_id, {}).get("days", ["mon", "tue", "wed", "thu", "fri", "sat", "sun"])
    
    await callback.message.edit_text(
        "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–µ–Ω—å, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –µ–≥–æ:\n"
        "‚úÖ –í—ã–±—Ä–∞–Ω–æ - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å\n"
        "‚¨úÔ∏è –ù–µ –≤—ã–±—Ä–∞–Ω–æ - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å\n\n"
        "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
        reply_markup=get_days_selection_keyboard(selected_days),
        parse_mode="HTML"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_days=selected_days)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π
    await state.set_state(ReminderStates.selecting_days)
    
    await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

@reminder_router.callback_query(F.data.startswith("day_"))
async def process_day_selection(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
    """
    user_data = await state.get_data()
    selected_days = user_data.get("selected_days", ["mon", "tue", "wed", "thu", "fri", "sat", "sun"])
    
    day_code = callback.data.split("_")[1]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –¥–µ–Ω—å –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    if day_code in selected_days:
        selected_days.remove(day_code)
    else:
        selected_days.append(day_code)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–Ω—è–º–∏
    await callback.message.edit_text(
        "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–µ–Ω—å, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –µ–≥–æ:\n"
        "‚úÖ –í—ã–±—Ä–∞–Ω–æ - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å\n"
        "‚¨úÔ∏è –ù–µ –≤—ã–±—Ä–∞–Ω–æ - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å\n\n"
        "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
        reply_markup=get_days_selection_keyboard(selected_days),
        parse_mode="HTML"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_days=selected_days)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    day_names = {
        "mon": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "tue": "–í—Ç–æ—Ä–Ω–∏–∫", "wed": "–°—Ä–µ–¥–∞", 
        "thu": "–ß–µ—Ç–≤–µ—Ä–≥", "fri": "–ü—è—Ç–Ω–∏—Ü–∞", "sat": "–°—É–±–±–æ—Ç–∞", "sun": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    status = "–¥–æ–±–∞–≤–ª–µ–Ω" if day_code in selected_days else "—É–¥–∞–ª–µ–Ω"
    await callback.answer(f"{day_names[day_code]} {status}")

@reminder_router.callback_query(F.data == "days_save")
async def save_reminder_days(callback: CallbackQuery, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
    """
    user_id = callback.from_user.id
    user_data = await state.get_data()
    selected_days = user_data.get("selected_days", ["mon", "tue", "wed", "thu", "fri", "sat", "sun"])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å
    if not selected_days:
        await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏!")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if user_id not in reminder_users:
        default_time = os.getenv("DEFAULT_REMINDER_TIME", "20:00")
        reminder_users[user_id] = {
            "time": default_time,
            "days": selected_days,
            "active": True
        }
    else:
        reminder_users[user_id]["days"] = selected_days
        reminder_users[user_id]["active"] = True
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ, –µ—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã
    time_str = reminder_users[user_id]["time"]
    hour, minute = map(int, time_str.split(":"))
    
    job_id = f"reminder_{user_id}"
    if scheduler.get_job(job_id):
        scheduler.remove_job(job_id)
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ APScheduler
    day_of_week = ",".join(selected_days)
    
    scheduler.add_job(
        send_reminder,
        CronTrigger(hour=hour, minute=minute, day_of_week=day_of_week),
        id=job_id,
        args=[callback.bot, user_id],
        replace_existing=True
    )
    
    # –ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    if not scheduler.running:
        scheduler.start()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    day_names = {
        "mon": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "tue": "–≤—Ç–æ—Ä–Ω–∏–∫", "wed": "—Å—Ä–µ–¥–∞", 
        "thu": "—á–µ—Ç–≤–µ—Ä–≥", "fri": "–ø—è—Ç–Ω–∏—Ü–∞", "sat": "—Å—É–±–±–æ—Ç–∞", "sun": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    
    # –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    selected_day_names = [day_names[day] for day in selected_days]
    days_text = ", ".join(selected_day_names)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    await state.set_state(ReminderStates.main_menu)
    
    await callback.message.edit_text(
        f"‚è∞ <b>–î–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</b>\n\n"
        f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö –≤ {time_str} –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –¥–Ω—è–º:\n"
        f"<b>{days_text}</b>",
        reply_markup=get_reminder_keyboard(),
        parse_mode="HTML"
    )
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await callback.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –¥–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {selected_days}")

@reminder_router.callback_query(F.data == "reminder_help")
async def reminder_help(callback: CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º.
    """
    await callback.message.edit_text(
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º:</b>\n\n"
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–º–æ–≥–∞—é—Ç –≤–∞–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –Ω–∏—Ö "
        "–≤ —Å—É–µ—Ç–µ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏.\n\n"
        "<b>–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"
        "‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ \"–í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\"\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è\"\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏\"\n\n"
        "<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        "‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –≤—ã –æ–±—ã—á–Ω–æ –Ω–µ –∑–∞–Ω—è—Ç—ã\n"
        "‚Ä¢ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫\n"
        "‚Ä¢ –í—ã–¥–µ–ª—è–π—Ç–µ —Ö–æ—Ç—è –±—ã 5-10 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏",
        reply_markup=get_reminder_keyboard(),
        parse_mode="HTML"
    )
    
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º")

@reminder_router.callback_query(F.data == "reminder_menu")
async def back_to_reminder_menu(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
    """
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    reminder_info = reminder_users.get(user_id, None)
    
    if reminder_info and reminder_info.get("active", False):
        time = reminder_info.get("time", "20:00")
        days = reminder_info.get("days", ["mon", "tue", "wed", "thu", "fri", "sat", "sun"])
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥—ã –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –≤ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        day_names = {
            "mon": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "tue": "–≤—Ç–æ—Ä–Ω–∏–∫", "wed": "—Å—Ä–µ–¥—É", 
            "thu": "—á–µ—Ç–≤–µ—Ä–≥", "fri": "–ø—è—Ç–Ω–∏—Ü—É", "sat": "—Å—É–±–±–æ—Ç—É", "sun": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        }
        days_text = ", ".join([day_names[day] for day in days])
        
        status_text = f"‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã</b>\n\n–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ {time} –≤ {days_text}."
    else:
        status_text = "‚ùå <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã</b>\n\n–í–∫–ª—é—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö."
    
    await callback.message.edit_text(
        "‚è∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏</b>\n\n"
        f"{status_text}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:",
        reply_markup=get_reminder_keyboard(),
        parse_mode="HTML"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    await state.set_state(ReminderStates.main_menu)
    
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

@reminder_router.callback_query(F.data == "main_menu")
async def to_main_menu(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    Args:
        callback: Callback query
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.answer(
        "‚úÖ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
        reply_markup=get_main_keyboard()
    )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π") 